			   Himitsu prompter protocol

The prompter is used to interactively prompt the user to provide information or
to consent to a privileged operation. The prompter is an arbitrary command which
is executed by the Himitsu daemon, and the two parties communicate over the
prompter's stdin and stdout file descriptors.

The protocol is a series of line-oriented (LF) commands and replies in UTF-8,
where commands are sent to the prompter via stdin and the prompter sends replies
back via stdout. Each command or reply begins with the name of the message (e.g.
"unlock"), optionally followed by a space and additonal data in a format
specific to each message type.

				  Conventions

In this document, examples of prompter sessions are indented. Commands from the
daemon to the prompter are prefixed with "=> ", and replies from the prompter to
the daemon are prefixed with "<= ".

				   Handshake

The first message the daemon sends is the version command, which identifies the
protocol version in use by the daemon and requests the protocol version in use
by the client. The version number follows the word "version" in the reply, and
is a series of three integers separated by dots ('.'), indicating respectively
the major, minor, and patch version of the protocol.

	=> version
	<= version 1.0.0

The protocol number uses semantic versioning to determine compatibility between
different versions of the daemon and prompter. The daemon will determine at its
discretion if this protocol version is suitable, and if so, proceed to issue
additional commands; if not, it will close stdin and the prompter should exit
with status code 1.

The current protocol number is 0.0.0.

			       Prompting process

The process is as follows:

1. The prompter is executed by the daemon
2. The handshake is performed
3. One or more "informative" commands are sent
4. The "prompt" command is sent
5. The prompter presents itself to the user and sends replies as appropriate
6. The prompter exits with a meaningful status code

The "informative" commands provide details, such as keys being requested, for
the prompter to display to the user. Following this, the "prompt" command causes
the interactive portion of this process to begin. During this process, the
prompter may gather additional information from the user (such as their keyring
password), but in all cases will determine if the user consents or does not
consent to the operation being performed. After gathering any required
information, the prompter shall exit with a status code indicating one of the
following conditions:

	0	The user consented to the operation
	1 	User did not consent to the operation
	2-126	Reserved for future use
	127	An internal error occured with the prompter

The daemon will close stdin when it is done sending commands.

				   Key format

A Himitsu key is made up of one or more key/value pairs. Each pair is separated
by one space ('\x20'). Each pair contains a key, which is a string matching the
POSIX Extended Regular Expression /^[-_A-Za-z]+$/. Optionally, following the key
may be a '!' character, indicating that the key stores a secret value, and '?',
indicating that a value is optional.

Following the key shall be an optional value, consisting of an '=' symbol to
separate it from the key, followed by the value itself. The value may contain
arbitrary printable UTF-8 characters, written according to shell quoting rules,
such that a space may appear in the value if it is surrounded by quotes.

				    Commands

key <key...>

The daemon may provide zero or more keys which are associated with the current
operation via the "key" command. Following the command name shall be a key
represented in the key format above.

unlock

The daemon will send this command if the keyring needs to be unlocked to
complete the current operation.

incorrect-password

The password given in the "password" reply was incorrect, and the user should be
asked to provide it again.

version

The daemon sends this command to request protocol version information from the
client.

prompt <params...>

The prompt command indicates that no further informative commands will follow,
and the prompter should present itself to the user and begin sending replies
according to their input. The provided parameters indicate which of several
consequences will occur if the user consents, selected from the following list:

- disclose: the user's encrypted keys will be disclosed to the client if they
  consent to this operation

				    Replies

password <password...>

The password reply is given in response to the "unlock" command after the user
provides a suitable password. The password will be verified by the daemon, which
may take some time - the prompter should display some kind of progress indicator
while this is being done. Following this, the daemon will either send the
"incorrect-password" message, or will close stdin. The password is appended to
the reply string following "password " and may contain only printable UTF-8
characters.

version <major.minor.patch>

The client replies to the prompter's request for version information with this
reply as described in the "Handshake" section above.

				    Examples

Scenario 1: the keyring is locked, and the daemon wishes to unlock it.

	=> version
	<= version 0.0.0
	=> unlock
	=> prompt unlock
	<= password hunter3
	=> incorrect-password
	<= password hunter2
	=> correct-password
	(daemon closes stdin)
	(prompter exits with status code 0)

Scenario 2: the keyring is unlocked and a client would like to view the user's
secret keys.

	=> version
	<= version 0.0.0
	=> key proto=web host=example.org user=jdoe password! comment?
	=> key proto=web host=example.com user=jdoe password! comment?="business account"
	=> prompt disclose 
	(daemon closes stdin)

The prompter should show the user these keys, explain that the secret keys
(password, in this case) will be disclosed to a third-party application, and
request their consent. If provided, it shall exit with status code 0; if not,
status code 1.

Scenario 3: the keyring is locked and a client would like to view the user's
secret keys.

	=> version
	<= version 0.0.0
	=> key proto=web host=example.org user=jdoe password! comment?
	=> key proto=web host=example.com user=jdoe password! comment?="business account"
	=> unlock
	=> prompt disclose unlock
	<= password hunter2
	=> correct-password
	(daemon closes stdin)
	(prompter exits with status code 0)
